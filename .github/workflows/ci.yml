name: 'ci'
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
env:
  docker_registry: 'us-docker.pkg.dev'
  docker_tag: '${{ github.sha }}'
  docker_repo: 'us-docker.pkg.dev/github-token-minter-dev/images'
  wif_provider: 'projects/576818306874/locations/global/workloadIdentityPools/wif-gh-pool/providers/wif-gh-provider'
  wif_service_account: 'github-token-minter-wif-sa@github-token-minter-dev.iam.gserviceaccount.com'
  server_project_id: 'github-token-minter-dev'
  server_service_account: 'github-token-minter-sa@github-token-minter-dev.iam.gserviceaccount.com'
concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true
jobs:
  # Linting jobs - terraform, go
  terraform_lint:
    uses: 'abcxyz/pkg/.github/workflows/terraform-lint.yml@beb7889aa0383b0ec3ceb3a4cfd201daa6dcc4d0' # ratchet:abcxyz/pkg/.github/workflows/terraform-lint.yml@main
    with:
      directory: 'terraform'
      terraform_version: '1.2'
  go_lint:
    uses: 'abcxyz/pkg/.github/workflows/go-lint.yml@beb7889aa0383b0ec3ceb3a4cfd201daa6dcc4d0' # ratchet:abcxyz/pkg/.github/workflows/go-lint.yml@main
    with:
      go_version: '1.19'
  # Unit tests - go
  go_test:
    uses: 'abcxyz/pkg/.github/workflows/go-test.yml@beb7889aa0383b0ec3ceb3a4cfd201daa6dcc4d0' # ratchet:abcxyz/pkg/.github/workflows/go-test.yml@main
    with:
      go_version: '1.19'
      go_packages: |-
        $(go list ./... | grep -v -E 'lumberjack/third_party|lumberjack/integration')
  lint_and_unit:
    runs-on: 'ubuntu-latest'
    needs:
      - 'terraform_lint'
      - 'go_lint'
      - 'go_test'
    steps:
      - run: 'echo prechecks complete'
  # Build the main github-token-minter server and push to artifact registry
  build-github-token-minter-server:
    runs-on: 'ubuntu-latest'
    needs:
      - 'lint_and_unit'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b' # ratchet:actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@c4799db9111fba4461e9f9da8732e5057b394f72' # ratchet:google-github-actions/auth@v0
        with:
          workload_identity_provider: '${{ env.wif_provider }}'
          service_account: '${{ env.wif_service_account }}'
          token_format: 'access_token'
      - name: 'Authenticate to Artifact Registry'
        uses: 'docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a' # ratchet:docker/login-action@v2
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.docker_registry }}'
      - name: 'Build the main server container and push to the registry'
        uses: 'docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5' # ratchet:docker/build-push-action@v3
        with:
          push: true
          tags: '${{ env.docker_repo }}/github-token-minter-server:${{ env.docker_tag }}'
          file: 'Dockerfile'
  build:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build-github-token-minter-server'
    steps:
      - run: 'echo build complete'

  # Deploy integration test infrastructure and run integration tests
  integration:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      tf_module_dir: './terraform/modules/ci'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b' # ratchet:actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955' # ratchet:goe-github-actions/auth@v0
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      # TODO: Workload Identity doesn't work with GCS Provider.
      # https://github.com/google-github-actions/auth/issues/89
      - name: 'Workaround Terraform issue'
        shell: 'bash'
        run: |-
          echo "GOOGLE_OAUTH_ACCESS_TOKEN=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@17d4c9b8043b238f6f35641cdd8433da1e6f3867 # ratchet:hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: 'Init the terraform infrastructure'
        run: terraform -chdir=${{ env.tf_module_dir }} init
      - name: 'Write tfvars file'
        env:
          server_image: '${{env.DOCKER_REPO}}/github-token-minter-server:${{env.DOCKER_TAG}}'
        run: |-
            echo project_id=\"${{ env.SERVER_PROJECT_ID }}\" >> ${var_file};
            echo server_image=\"${{ env.server_image }}\" >> ${var_file};
            echo server_service_account=\"${{ env.server_service_account }}\" >> ${ver_file};
            echo >> ${var_file};
            cat ${var_file};
            echo "tfvar_file=${var_file}" >> $GITHUB_ENV;
      - name: 'Apply the infrastructure updates'
        id: 'tf_apply'
        run: |-
            terraform -chdir=${{ env.tf_module_dir}} apply -auto-approve -var-file=${{env.tfvar_file}};
      - name: 'Cleanup the infrastructure'
        id: 'tf_destroy'
        if: always()
        run: terraform -chdir=${{ env.tf_module_dir}} apply -destroy -auto-approve -var-file=${{env.tfvar_file}};