name: 'github-token-minter action'
description: 'Exchange a GitHub OIDC token for one with elevated privlidges.'
inputs:
  wif_provider:
    description: 'Workload identity federation provider.'
    required: true
  wif_service_account:
    description: 'Workload identity federation service account.'
    required: true
  service_audience:
    description: 'Cloud Run audience for the production github-token-minter service'
    required: true
  service_url:
    description: 'URL for the production github-token-minter service'
    required: true
  requested_permissions:
    description: 'Permission request information in the form {"repositories":["github-token-minter"],"permissions":{"issues":"read"}}'
    required: true
outputs:
  token:
    description: 'Newly minted token'
    value: '${{ steps.mint-token.outputs.token }}'


runs:
  using: 'composite'
  steps:
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@c4799db9111fba4461e9f9da8732e5057b394f72' # ratchet:google-github-actions/auth@v0
      with:
        workload_identity_provider: '${{ inputs.wif_provider }}'
        service_account: '${{ inputs.wif_service_account }}'
        token_format: 'id_token'
        id_token_audience: '${{ inputs.service_audience }}'
        id_token_include_email: true
    - id: 'mint-token'
      env:
        TOKEN: '${{ steps.auth.outputs.id_token }}'
        SERVICE_URL: '${{ inputs.service_url }}'
        REQUESTED_PERMISSIONS: '${{ inputs.requested_permissions }}'
      uses: 'actions/github-script@v6'
      with:
        script: |
          try {
              const { TOKEN, SERVICE_URL, REQUESTED_PERMISSIONS } = process.env;
              const idToken = await core.getIDToken('github-token-minter');
              const idTokenValue = JSON.parse(idToken).value;
              const response = await fetch(`${SERVICE_URL}/token`, {
                  method: 'post',
                  body: REQUESTED_PERMISSIONS,
                  headers: {
                      'Content-Type': 'application/json',
                      'X-GitHub-OIDC-Token': idTokenValue,
                      'Authorization': `Bearer ${TOKEN}`,
                  }
              });
              if (response.ok) {
                const resp = await response.json();
                core.setOutput('token', resp.token);
              } else {
                const errorBody = await response.text();
                core.error(`Error response from server ${errorBody}`)
                throw new Error(`HTTP Error Response: ${response.status} ${response.statusText}`);
              }
          }
          catch (err) {
              core.setFailed(err); 
          }
